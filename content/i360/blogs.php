
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title>Blog</title>
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta http-equiv="X-UA-Compatible" content="IE=edge" />
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" media="screen">
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootswatch/3.3.6/darkly/bootstrap.min.css">
	<style>
		p {
			text-indent: 40px;
		}
		h2 {
			padding-top: 20px;
			margin-bottom: 0px;
		}
		h2 + div {
			text-indent: 0;
			margin: 0;
			padding: 0;
			margin-bottom: 10px;
		}
		h2 + p {
			margin-top: 10px;
		}
	</style>
</head>
<body>
	<div class="navbar navbar-default navbar-fixed-top">
		<div class="container">
			<div class="navbar-header">
				<a href="/" class="navbar-brand">Fru1tMe: Blog</a>
			</div>
		</div>
	</div>

	<div style="height: 50px;"></div>
	<div class="container">
		<div class="page-header">
			<h1>The Kodlee Blog</h1>
			<p>A Class Assignment Production</p>
		</div>

		<h2>Presidential Election 2016: The Best UI</h2>
		<p>Election season is here, and with it, come the design choices made by the campaign team for their rally-building, news-giving, donation-driving websites. Chris Calabrese breaks down each presidential candidate’s website, and analyses its structure in his article, <a href="http://www.cooper.com/journal/2016/2/presidential-election-2016-the-best-ui">Presidential Election 2016: The Best UI</a>. Here, Chris looks at splash pages, home pages, navigation menus, alternate language options, user experience, and visual design.</p>
		<p>Splash screens are a great way to display a call to action. As a web page loads, even the front page, attention is immediately grabbed from the user by interrupting the standard page load process, and displaying information of sorts over top of the normal content. Now this can be used in both a good and bad way. Personally, I’ve seen news sites, tech blogs, and other variations of “subscribe to see more”, or “pay to view this content” which makes sense – content providers want a means of compensation for their work, but personally turn me off to the site as I just end up closing the tab. Chris doesn’t mention the effectiveness or use of the splash screen, but merely notes their frequency for each candidate. Trump is the only candidate to completely omit the splash screen, with Hillary a close second with a modal box instead of a complete screen. Both Ted and Bernie display splash screens occasionally to promote a state’s primary or collect donations after a win. Marco comes in with the most frequently persistent splash screen for first time viewers.</p>
		<p>Home pages are the next topic discussed within the post. Home pages are the most important as they’re the first element of a website a user sees. It must display the most important topics that a website offers, with emphasis on the initial visible portions of the page (ie “before the fold” real estate). Not much emphasis is given to evaluating the layouts themselves, with the exception of pointing out that Bernie Sanders was the only to provide a left side main navigation versus a leaderboard top navigation panel. No good or bad points with these styles. It’s the contents of the navigation that are given the attention.</p>
		<p>Breaking down the focus of navigation, donations were the most important and the most highlighted function for all candidates. With the exception of the shopping link, all other candidates, save for trump, prioritized about, issues, events, and volunteer opportunities equally. Chris highlights Trump as an outlier prioritizing his About and Schedule sections lower than other candidates. This conclusion was drawn by the design aspect of “below the fold” real estate. On mobile sites, “below the fold” refers to any content that isn’t immediately visible on initial page load without scrolling. This space is important because there is a <a href="https://www.nngroup.com/articles/page-fold-manifesto">more than an 84% perceived difference of information above vs below the fold</a>. This, of course, ties back to Trump’s design with the aforementioned sections regularly below the fold which is just bad design.</p>
		<p>As an aside, all candidates save for, you guessed it, Trump, include a Spanish option for their websites, and in Chris’s words: “perhaps consistent with his position on immigration”. We then move on to the final breakdown of the candidate’s sites: user experience and visual design. Chris claims Bernie’s site is well balanced with a nice use of negative space. The clean, modern design suits today’s era of web styles, and appeals to his intended audience. The only quirk is the leaderboard with the clash of images that draws a clash with the site design. Both Hillary and Ted trail a close second with good typography, clean layouts, and good navigation. The distinction between first and second place here is what lies below the belt. Content after the leaderboard starts breaking down in structure and integrity with the 2nd place contestants. The 3rd (4th?) place candidate is Marco Rubio with the infini-scroll news, media, and article links. An overwhelming “bevy of videos and images that vary in shape and size.” Finally, trailing last is Donald Trump’s “three dollar” website complete with gradients, badly scaled hero image, bad typography, and haphazard main content layout.</p>
		<p>Overall, this article was a fun read on how different designers create their own approach to the single issue of raising awareness and pushing a call to action by users. The various layouts and design decisions seemed to highlight various aspects of each presidential candidate’s policies and world views.</p>

		<h2>PHP The Right Way: Design Patterns</h2>
		<p>Whenever PHP is mentioned to a group of developers, you'll always hear snickering, laughing, and negative comments about it. But what gives it it's bad rap? Actually, much like comic sans is given a bad name with little knowledge of why, a majority of developers don't know why PHP is hated on so much. Like all languages in the world, PHP sure does have its inconsistencies and limitations; namely, the lack of a unified naming convention across internal methods. But to the majority of all other points made against PHP exist in any other mature, respected language like Java or C family language. The difference is, PHP is just the punching bag for the developer community. The article <a href="http://www.phptherightway.com/pages/Design-Patterns.html">PHP The Right Way: Design Patterns</a>, implements methodologies employed by other well respected languages in PHP.</p>
		<p>We start with the most commonly used Factory method. Like any decently typed system, factories in PHP produce instances of a given class via a static create method. The advantages to using a factory over direct instantiation are gained when creating an instance of said class is highly complicated. A factory would reduce the redundant calls and preparations throughout the program.</p>
		<p>We move onto Singletons. PHP enables the use of singletons in an even easier fashion through its late static binding. A universal singleton class can be created and extended by other classes without the need to rewrite singleton getters and instantiation lines. The use of late static binding allows the parent Singleton class to instantiate, store, and retrieve the instance without the need for re-implementation from the child class.</p>
		<p>Onto the modular strategy pattern. With PHP's full support for inheritance and typing, the strategy pattern can be employed like any other language. Though PHP isn't fully statically typed, PHP allows for type hinting for all objects, and with the advent of PHP 7, allows for the type hinting of primitive (scalar) values. With modern IDEs, PHP's type hinting feature is a great compromise between static and dynamic typing, utilizing the strongest points in both.</p>
		<p>The article then moves onto the front controller pattern, which is one I employ on my websites. A pattern that's unique to web applications, the front controller design pattern forces all traffic through a single entrance point; namely the front index page. The index file then routes, loads dependencies, and returns the correct page contents via the controlling algorithm. This method is beneficial to a web application as it limits the effective target area for a website to be compromised. This pattern is also highly beneficial as it encourages the use of dependency injection, highly modular code, and a central point of security.</p>
		<p>Finally, the article discusses the model view controller (MVC) pattern that also encourages modularization and separation of business logic and display logic. PHP manages the MVC pattern very well as it's built in HTML integration scheme is highly flexible.</p>
		<p>In all, PHP is a very flexible language that, sure, can be used improperly. But with the right knowledge, PHP is a powerful, dynamic programming language that is not faster than its competition, but also safer, more secure, and more robust.</p>

		<h2>The Dangers of Customization</h2>
		<p>People like power. Specifically, users dislike feeling like they have little to no control over an application. A texting app that only allows ordering of conversations strictly in chronological order may satisfy the majority of users, but may also lose out on the potential for more with lexical ordering. With these two options, it also wouldn't be too far fetched to allow for reverse chronological, or reverse alphabetical, or manual ordering, etc. So at what point does it become excessive or even detrimental? <a href="http://www.tonythings.com/the-dangers-of-customization/">The Dangers of Customization</a> by Tony Larsson sums up several key points about user options in three key points.</p>
		<p>The first point is impeding usability. Tony mentions the Android operating system as an example for this behavior. The offending feature allows users to place any arrangement of icons and widgets on any number of homescreens. While I found this feature to be very useful for me, Tony claims that many users report a decrease in overall experience with the product. The argument goes, that the common user vouches for how 'in-the-moment cool' a layout looks, without regard to actual usability. For example, a clock widget that covers an entire page, but looks and feels very modern. This layout doesn't benefit the user at all because one might as well look at the top bar for the time. On top of the redundancy, the clock simply takes up space and requires the user to scroll one more page to access the remaining home screen pages. I completely agree with Tony's statements that the designer shouldn't blame the user for not knowing better. I have experienced first hand the unnatural sight of an unbalanced home screen page due to my lack of design skills, laying out my first mobile device. We can also see how the competing iOS products deal with this feature by simply locking the ability to place icons wherever the user wants, and instead, opting to collapse the icons towards the top left of the screen.</p>
		<p>The next point Tony talks about is overwhelming complexity. Overwhelming complexity occurs when a user is given so many choices, none can be made. It's the feeling of information overload when purchasing individual components for a computer. I've experienced this feeling first hand when learning about liquid cooling for my rig. With dozens of options for each individual component, I was frozen, attempting to understand each trinket within the system that had their own quirks and materials. Tony brings in the example of iPads and how standardized they were. An iPad was simply purchased via 'one iPad please' versus a computer's '32 gigabytes of ram, a 3.12 gigahertz clocked cpu, and a dedicated Nvidia graphics card please'.</p>
		<p>Finally, the last point mentioned was the "impossibility of getting it 'right'". White? Red? 16"? 20"? 16 GB? 32GB? The options can be limitless, but sometimes that's not a good thing. Once a user compromises and locks in their selection, there's always the feeling of 'what if…'</p>
		<p>Overall, it's worth to note that these highlights simply cover the surface of design decisions and options that should be available to the user. Your intended user base will always change the dynamic of the product, but overall, these guidelines should be kept in mind.</p>

		<h2>How Do You Design? Photoshop vs Coded Prototypes</h2>
		<div>A <a href="https://www.reddit.com/r/webdev/comments/3tcy2z/how_do_you_design_full_photoshop_mockups_vs/">Reddit Discussion</a></div>
		<p>A prevalent question when designing is: what is the best way to begin prototyping? The question for web developers becomes, is the jumping off point straight into HTML and CSS or should a mockup be created outside of code? Various users claim that jumping straight into code is beneficial for their workflow. The general consensus around mocking with code is that, reusable snippets of HTML as well as frameworks such as Bootstrap and Angular, make it very easy to mock out a design with fake data, which helps clients visualize the end result a lot cleaner. This in turn provides more in depth feedback and promotes good communication. In the end, the template that was created can then be slightly tweaked and turned into the final product, reducing turnover time between mock and final result. Several other points mentioned include very easily applying small stylistic effects to the mockup like, “round borders, shadows, transparency, gradients, and interactive cues.” Again, afterward, being able to take the design and paste it into the final result. These points summed up trend toward a single designer who is trained only in development and not graphic design or skills of the like.</p>
		<p>On the other hand, developers who claimed non-code based initiations were advantageous cited faster overall layout changes. Things like moving groups of objects are trivial with graphic designing tools like Adobe Photoshop or Illustrator, but are magnitudes slower in code. Another point made was that graphic programs are faster for “what you see is what you get (WYSIWYG)” editing which is advantageous when discussing with a client as edits can be made on the fly and instantaneous instead of waiting for a code rewrite. The last point made about non-code based solutions touches on the quantity of both commercial and open source utilities that very easily mock the behavior of code-based prototypes, with simple WYSIWYG editing. Tools such as Adobe Comet, Microsoft’s Visio, and Cooper’s InVision all allow for intricate templated designs within minutes of startup. </p>
		<p>So in the grand scheme of design, which path is the best to go down first? Well, many great points have been discussed for both code-based and non code-based solutions, but the winner has to be the non code-based solutions. Like what was discussed in our previous lectures, we’re not looking for great detail in initial prototyping. Things like color, shadow blending, rounded corners, and animations are all fine details that will be changed over and over again during the course of design. It’s not worth focusing on the nitty gritty details so early, and is in fact is detrimental and time consuming in the long run, in the development cycle. The point of an initial prototype is to gather feedback not only from the client, but also the users of the system. At the start, this feedback should be large in scope, like the feature set or the focus of the application – things that don’t concern color, or font choice, or if a containing box’s borders should be round or not.</p>

		<h2>Beyond Design Trends: Timeless User Interface</h2>
		<p>In <a href="http://thenextweb.com/dd/2016/01/28/beyond-design-trends-timeless-user-interface-techniques/#gref">TheNextWeb’s blog post</a> on the advancement and comparison of modern web interfaces, Carrie Cousins explores trends through the modern era of cutting-edge web design, and content-driven sites. We’re first given a glimpse at the front page video player. Adorned by audio and customizable video interaction, we become completely immersed in the site, with the video successfully retaining the user. A careful path has be tread here, though, as users have mixed responses to automatic audio playback. But we move forward onto page interactions. Because websites aren’t dead static content anymore, content creators want to provide engaging media that has the user playing with various aspects of the site, of course, following the ultimate goal of retaining the user’s attention to the site. Carrie moves on to talk about full screen navigation onto the desktop platform. From simple image and text screens, to multiple rich media attachments, to the windows card style interfaces. This type of navigation highlights the plethora of data-taxing content that the modern generation of platforms and infrastructure can handle. But completely on the converse, there are the simple split screened, path-focused websites that take pride in minimalist design, and simplistic organization. While both provide modern looks, both also show the powerful transformations a web designer can imbue onto a website.</p>
		<p>We move onto personalization, tracking cookies, and managed accounts. With the advent of big data and the ability to forecast, larger companies (notably Amazon) are able to predict and present targeted products and services that may interest you. Such accurate models give power to the sellers by hiding the negative connotation of shotgun advertisement, into something that is actually relevant to your interests. Carrie then shifts over to how one might grab the attention of a user through typefaces and positioning. The ability to use non-standard (“non web safe”) fonts, gives immense power to the designer. No longer are users faced with staring at Serif fonts with the ability to leverage Google’s font cache at the click of a button. Fonts allow for varied expression throughout a website, and an unintended side effect of this includes easier accessibility with bolder, more pronounced fonts.</p>
		<p>Transitions have never more been more stylistically fluid. With parallax and inertia effects, scrolling is no longer a chore just to view more content. It becomes a driving force that engages the user and provides just one more interaction to the page. Apart from the transitions, the overall theme of a site has dramatically changed as well. We saw a movement from sharp corners, attempted 3D effects, and blocky content, to rounded edges, soft shadow, and that flat paradigm termed “Material Design” by Google. On top of modern looks, modern feels are applied as well in the form of “Tiny Animations”. Things like movement, hover states, and loading screens that inform the user that what they’re interacting with, isn’t just a flat page. It’s a representation of a physical object that’s printed onto the screen, and every action, button press, and mouse movement, has an effect on the page, just like on real world objects.</p>
		<p>In closing, Carrie mentions how websites are moving closer towards looking and feeling like native applications on the device. I wholeheartedly agree that due to advancements in browser standards, improved network abilities, and good design; websites will be able to take the place of interaction-complete applications on any device.</p>

		<h2>Training Smarter Monkeys (aka Automated Failure Testing)</h2>
		<div>By <a href="http://techblog.netflix.com/2016/01/automated-failure-testing.html">Netflix</a></div>
		<p>Netflix has always been the leading tech company in automated testing. With customer satisfaction at the forefront of their business, it’s no wonder they take so much pride in guaranteeing application uptime. But Netflix doesn’t just do the standard unit and integration test. They do what’s called failure testing. In this type of testing, while their application code runs, they purposefully take down servers and services, block remote procedure calls (rpc), and even return bad data to the application. In English, this is like instructing someone to run on a treadmill, while you start chopping off the arms, legs, and head, and watching how they react. The point of this is to find potential failure points for the user-facing portions of the application, to ultimately mitigate inconsistencies with the user experience (like application crashes or bad error messages). In the treadmill example, mitigation would occur by programming a robot that replaces a leg with wheels if that’s the limb that was cut off – while being unable to turn, the human would still be able to complete the current task and potentially recover after the treadmill stopped and another person could replace them.</p>
		<p>By standard, this failure testing procedure has always been fairly manual. One must know or analyze, beforehand, what services should be interrupted and the testing software then handles the rest. In Automated Failure Testing by Netflix, they discuss prototyping and implementing an algorithm, dubbed Molly, which detects failure points, then analyzes those points to produce a list of potential failures. In just the ‘App Boot’ sequence alone, there exist roughly 100 failure points, which attempting to test them all, would result in 2^100 (or about 1 with 30 zeros following) experiments needing to be run. Improbable to do, considering these tests require reruns for every new change in the application or any backend service. Molly, instead, was able to prod and analyze the software package to return a total of 5 potential failures in the pool of 100 failure points, in this example of the ‘App Boot’ sequence, which is a lot more manageable than the 100 total.</p>
		<p>So what does this mean in terms of us and design? Well, for Netflix, this means that their testing can go much, much quicker. Instead of brute forcing 2^100 potential failure scenarios in the boot sequence, they’re able to remove the unnecessary failure points, and test only the important potential failures, all automatically, through using Molly in conjunction with their testing suite. Because this technology can also be expanded to other areas of Netflix, it’s possible that the entire failure testing process can become completely automated. As we know, with more tools automating development, bugs and errors can be found faster and before they hit users. This, in turn, allows for more time to focus on implementing new features instead of ‘firefighting mode’ to hunt down and reduce potential problems. It also severely reduces the time between release and receiving feedback for application bugs. All of these points, allow for a better user experience, and greater customer satisfaction.</p>

		<h2>Abstraction Considered Harmful...?</h2>
		<p>In the realm of programming, abstraction is the key to reusability. The term in the English language can be used for both good and bad purposes. For programmers, it's the sweet sound of chasing down implementations and derivative works that may or may not make our lives easier. In the article, <a href="https://dzone.com/articles/abstraction-considered-harmful">Abstraction Considered Harmfull…?</a> by Tyler Treat, we learn about why this powerful and useful tool can sometimes be evil.</p>
		<p>The Introduction glosses over the source and reason behind this madness of a blog post. A short introduction to abstraction is also given: it's what we use to manage complexity. Abstraction, in its literal sense, is taken here in programming, where a highly complicated set of instructions is exposed to other developers via a set of simple inputs and outputs. But Tyler quickly moves onto his first point, which is that programmers are solely set on their own uses for the abstracted modules. In Tyler's words "programmers are lazy, and abstraction help us be lazy." On the contrary, users of these modules don't need to think about the implementation of it. And that's the point. Abstraction assists in code-reuse. But sometimes this is a very bad thing. As Tyler outlines in the blog, sometimes the abstraction layer should be omitted. The problem at hand should be broken down into smaller and smaller pieces instead of throwing in dozens of individual modules to try to solve the larger problem (which is what we aim to do).</p>
		<p>Tyler outlines the steps a programmer takes when using these abstracted modules. First, a programmer stumbles upon a problem. This problem is broken down into sub-problems that ultimately lead to the solution of the larger problem. Now, as programmers are lazy, and lots of resource are available for free to them, it's natural to think of already implemented solution to these sub problems. Especially because these sub problems come in similar shapes and sizes. The then lack of modules will cause the programmer to complain about a lack of abstraction for their given problem, ad infinitum. They will then completely hard code their solution with a lack of abstraction due to their finding of a lack of abstraction for their problem, and the cycle continues.</p>
		<p>Tyler continues his blog with the statement that abstraction doesn't make things less hard. Abstraction is simply there to hide the fact that something was hard, and wrap it in a neat interface to use. The key to abstraction is finding the delicate balance of precision and granularity. It's impossible to know how your abstracted module will be used in the future and by other programmers, but a well thought out and reasoned point, is better than simply throwing the input/output interface at anyone coming close to your module for simplicity's sake.</p>
		<p>Finally, like any good author with a clickbait title, Tyler finalizes his blog with a truth that contradicts the entire blog: "abstraction, in and of itself, is not harmful."</p>
		<p>My thoughts for the blog are that of skeptic. Tyler is subject to the slippery slope fallacy in reasoning. A good programmer has practice and knowledge that allows them to write and interface with abstracted code snippets. This is what separates good programmers from bad ones. While, sure, I agree that "precision loses granularity", it's like saying "breathing underwater causes drowning". It's simply stating a fact and beating down a man made of straw.</p>

		<h2>The Suitcase of the Future</h2>
		<p>Following trends of travel ease and comfort, NUA Robotics unveiled a radical change to the way suitcases behave with their IndieGoGo funded <a href="http://unbouncepages.com/nuarobotics/">Bluesmart carry-on luggage</a>. With the goal of acclimating suitcases to modern standards and feature-sets, Bluesmart provides hands-free mobility, USB charging, and anti-theft protection. But who is NUA Robotics really aiming at in this market? Can this re-invention of baggage cover all use cases?</p>
		<p>We start with focus on the problem of travelling with carry-on luggage. Bags are bulky, heavy, are hard to store, and sometimes break. While solving the single issue of a hands-free luggage device, Bluesmart introduces a myriad of new issues in security and ease of use. While, sure, a hands-free bag would free up some space to use both hands for something, one would still need to be aware of their surroundings for marked queues like TSA check lines or boarding lines. Apart from that, stairs, busses, light rails, trains, and the like, would all require you to manually control the luggage anyway. Even more issues arise if the luggage malfunctions or winds up in places it shouldn’t, like falling off a train station platform, or down a set of stairs. I, for one, would be much more comfortable knowing my luggage isn’t moving anywhere because I have a grip on the handle.</p>
		<p>But let’s ignore these issues, and say the product works as intended and flawlessly. Due to the design of the device, one is required to have a smartphone with adequate knowledge of how to operate it. This leaves the user demographic of the Bluesmart around the age of those who are socializers and media consumers. At the airport, one is expected to perform a certain set of actions when checking in, navigating security, and reaching the boarding gate; and as we all know, even driving a car won’t stop the average user from using their smartphone to text or call. Putting two and two together, one can see the social implications of enabling even easier access to smart devices while processing through an airport. Even on the product’s video advertisement, we see a user who is walking around beautiful landscapes within a city, with the product trailing him, staring straight at his mobile device, oblivious to his surroundings. Now, apart from the lack of the point of travelling, namely, enjoying the scenery and culture, I don’t want another delay in my itinerary when travelling caused by inattentive passengers holding up a line or blocking a doorway.|</p>
		<p>Finally, I want to touch on the subject of security. Sure you can add bells and whistles to the phone app and on the luggage, but naturally, if you aren’t holding it, it’s simply easier to steal. This is amplified by the goal of the product, which is to simplify travel inconvenience by letting you set it and forget it. Misplacing your mobile device also includes the burden of losing your carry-on luggage as the Bluesmart follows your phone. Lastly, edge-cases could cause thousands of dollars of misplaced electronics and other sensitive information, like what occurs when there is heavy foot traffic and the poor suitcase gets kicked around? For me, I think I’ll stick to manual pull suitcases for now.</p>
	</div>
	<div style="height: 100px;"></div>

	<script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>
</html>
